import * as Web3 from "web3";
import { BigNumber } from "../../utils/bignumber";
import { DebtOrder } from "../types";
import { ContractsAPI } from "../apis";
import { DebtRegistryEntry } from "../types/debt_registry_entry";
export interface SimpleInterestLoanOrder extends DebtOrder.Instance {
    principalAmount: BigNumber;
    principalTokenSymbol: string;
    interestRate: BigNumber;
    amortizationUnit: AmortizationUnit;
    termLength: BigNumber;
}
export interface SimpleInterestTermsContractParameters {
    principalAmount: BigNumber;
    interestRate: BigNumber;
    amortizationUnit: AmortizationUnit;
    termLength: BigNumber;
    principalTokenIndex: BigNumber;
}
export declare type AmortizationUnit = "hours" | "days" | "weeks" | "months" | "years";
export declare const SimpleInterestAdapterErrors: {
    INVALID_TOKEN_INDEX: (tokenIndex: BigNumber) => any;
    INVALID_PRINCIPAL_AMOUNT: () => any;
    INVALID_INTEREST_RATE: () => any;
    INVALID_AMORTIZATION_UNIT_TYPE: () => any;
    INVALID_TERM_LENGTH: () => any;
    INVALID_TERMS_CONTRACT: (principalToken: string, termsContract: string) => any;
    UNSUPPORTED_PRINCIPAL_TOKEN: (principalTokenSymbol: string) => any;
    MISMATCHED_TOKEN_SYMBOL: (principalTokenAddress: string, symbol: string) => any;
    MISMATCHED_TERMS_CONTRACT: (termsContract: string) => any;
};
export declare class SimpleInterestLoanTerms {
    private assert;
    constructor(web3: Web3, contracts: ContractsAPI);
    packParameters(termsContractParameters: SimpleInterestTermsContractParameters): string;
    unpackParameters(termsContractParametersPacked: string): SimpleInterestTermsContractParameters;
    assertPrincipalTokenIndexWithinBounds(principalTokenIndex: BigNumber): void;
    assertPrincipalAmountWithinBounds(principalAmount: BigNumber): void;
    assertInterestRateValid(interestRate: BigNumber): void;
    assertValidAmortizationUnitCode(amortizationUnitCode: number): void;
    assertValidAmortizationUnit(amortizationUnitType: AmortizationUnit): void;
    assertTermLengthWholeAndWithinBounds(termLengthInAmortizationUnits: BigNumber): void;
}
export declare class SimpleInterestLoanAdapter {
    static Installments: {
        [type: string]: AmortizationUnit;
    };
    private assert;
    private contracts;
    private termsContractInterface;
    constructor(web3: Web3, contracts: ContractsAPI);
    /**
     * Asynchronously generates a Dharma debt order given an instance of a
     * simple interest loan order.
     *
     * @param  simpleInterestLoanOrder a simple interest loan order instance.
     * @return                         the generated Dharma debt order.
     */
    toDebtOrder(simpleInterestLoanOrder: SimpleInterestLoanOrder): Promise<DebtOrder.Instance>;
    /**
     * Asynchronously generates a simple interest loan order given a Dharma
     * debt order instance.
     *
     * @param  debtOrder a Dharma debt order instance.
     * @return           the generated simple interest loan order.
     */
    fromDebtOrder(debtOrder: DebtOrder.Instance): Promise<SimpleInterestLoanOrder>;
    /**
     * Asynchronously translates a Dharma debt registry entry into a
     * simple interest loan order.
     *
     * @param entry a Dharma debt registry entry
     * @return      the translated simple interest loan order
     */
    fromDebtRegistryEntry(entry: DebtRegistryEntry): Promise<SimpleInterestLoanOrder>;
    getRepaymentSchedule(debtEntry: DebtRegistryEntry): Array<number>;
    private assertPrincipalTokenCorrespondsToSymbol(principalToken, symbol);
    private assertIsSimpleInterestTermsContract(termsContractAddress);
}
